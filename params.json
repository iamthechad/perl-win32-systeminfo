{"name":"Win32::SystemInfo","tagline":"Memory and Processor information on Win32 systems","body":"# NAME\r\n\r\nWin32::SystemInfo - Memory and Processor information on Win32 systems\r\n\r\n# SYNOPSIS\r\n\r\n    use Win32::SystemInfo;\r\n\r\n# Get Memory Information\r\n\r\n    my %mHash;\r\n    if (Win32::SystemInfo::MemoryStatus(%mHash))\r\n    {\r\n     ...process results...\r\n    }\r\n\r\n    To get specific values:\r\n    my %mHash = (TotalPhys => 0, AvailPhys => 0);\r\n    if (Win32::SystemInfo::MemoryStatus(%mHash))\r\n    {\r\n     ...mHash contains only TotalPhys and AvailPhys values...\r\n    }\r\n\r\n    Change the default return value:\r\n    Win32::SystemInfo::MemoryStatus(%mHash,\"MB\");\r\n\r\n# Get Processor Information\r\n\r\n    # This usage is considered deprecated\r\n    my $proc = Win32::SystemInfo::ProcessorInfo();\r\n\r\n    my %phash;\r\n    Win32::SystemInfo::ProcessorInfo(%phash);\r\n    for (my $i = 0; $i < $phash{NumProcessors}; $i++) {\r\n     print \"Speed of processor $i: \" . $phash{\"Processor$i\"}{MHZ} . \"MHz\\n\";\r\n    }\r\n\r\n# ABSTRACT\r\n\r\nWith this module you can get total/free memory on Win32 systems,\r\nincluding installed RAM (physical memory) and page file. This module will\r\nalso let you access processor information, including processor family\r\n(386,486,etc), speed, name, vendor, and revision information.\r\n\r\n# DESCRIPTION\r\n\r\n- __MemoryStatus__\r\n\r\n    __Win32::SystemInfo::MemoryStatus__(%mHash,\\[$format\\]);\r\n\r\n        %mHash                      - The hash that will receive the results.\r\n                                      Certain values can be set prior to the\r\n                                      call to retrieve a subset. (See below)\r\n        $format                     - Optional parameter. Used to set the order\r\n                                      of magnitude of the results. (See below)\r\n\r\n        Determines the current memory status of a Win32 machine. Populates\r\n        %mHash with the results. Function returns undef on failure.\r\n\r\n        Values returned through the hash:\r\n        MemLoad                     - Windows NT 3.1 to 4.0: The percentage of\r\n                                      approximately the last 1000 pages of physical\r\n                                      memory that is in use.\r\n                                    - Windows 2000 and later: The approximate percentage of\r\n                                      total physical memory that is in use.\r\n        TotalPhys                   - Total amount of physical memory (RAM).\r\n                                    - For Windows 2k and earlier, see CAVEATS below about \r\n                                    - the accuracy of this value.\r\n        AvailPhys                   - Available physical memory (RAM).\r\n        TotalPage                   - Allocated size of page (swap) file.\r\n        AvailPage                   - Available page file memory.\r\n        TotalVirtual                - Total physical + maximum page file.\r\n        AvailVirtual                 - Total amount of available memory.\r\n\r\n        Values returned through the hash can also be specified by setting\r\n        them before the function is called.\r\n            my %mHash = (TotalPhys => 0);\r\n            Win32::MemoryInfo::MemoryStatus(%mHash);\r\n\r\n        Will return only the total physical memory.\r\n\r\n        MemoryStatus return values in bytes by default. This can be changed with\r\n        the $format parameter. Valid values for $format are:\r\n            B        -  Bytes (default)\r\n            KB       -  Kilobytes\r\n            MB       -  Megabytes\r\n            GB       -  Gigabytes\r\n\r\n- __ProcessorInfo__\r\n\r\n    $proc = __Win32::SystemInfo::ProcessorInfo__(\\[%pHash\\]);\r\n\r\n        Determines the processor information of a Win32 computer. Returns a \"quick\"\r\n        value or undef on failure. Can also populate %pHash with detailed information\r\n        on all processors present in the system.\r\n\r\n        $proc                        - THIS VALUE HAS BEEN MADE OBSOLETE\r\n                                     - FOR WINDOWS NT AND LATER. RELY ON IT\r\n                                     - AT YOUR OWN RISK.\r\n                                     - Contains a numerical representation of the\r\n                                     - processor level for Intel machines. For\r\n                                     - example, a Pentium will return 586.\r\n                                     - For non-Intel Windows NT systems, the\r\n                                     - possible return values are:\r\n                                     - x64: AMD64\r\n                                     - PPC: PowerPC\r\n                                     - MIPS: MIPS architecture\r\n                                     - ALPHA: Alpha architecture\r\n                                     - UNKNOWN: Unknown architecture\r\n\r\n        %pHash                       - Optional parameter. Will be filled with\r\n                                     - information about all processors.\r\n\r\n        Values returned through hash:\r\n        NumProcessors                - The number of processors installed\r\n        ProcessorN                   - A hash containing all info for processor N\r\n\r\n        Each ProcessorN hash contains the values:\r\n        Identifier                   - The identifier string for the processor\r\n                                     - as found in the registry. The computer I'm\r\n                                     - currently using returns the string\r\n                                     - \"x86 Family 6 Model 7 Stepping 3\"\r\n        VendorIdentifier             - The vendor name of the processor\r\n        MHZ                          - The speed in MHz of the processor\r\n                                     - This is not a calculated value, but the value\r\n                                     - that is recorded in the Windows registry.\r\n                                     - This value will be -1 for pre Windows NT\r\n                                     - systems (95/98/Me). \r\n        ProcessorName                - The name of the processor, such as\r\n                                     - \"Intel Pentium\", or \"AMD Athlon\".\r\n\r\n        PLEASE read the note about the MHz value in Caveats, below.\r\n\r\nNo functions are exported.\r\n\r\n# INSTALLATION\r\n\r\nInstallation is simple. Follow these steps:\r\n\r\n    perl Makefile.PL\r\n    nmake\r\n    nmake test\r\n    nmake install\r\n\r\nCopy the SystemInfo.html file into whatever directory you keep your\r\ndocumentation in. I haven't figured out yet how to automatically copy\r\nit over, sorry.\r\n\r\nNmake can be downloaded from [http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/Nmake15.exe](http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/Nmake15.exe)\r\nAlternatively, Strawberry Perl includes dmake that can be used instead.\r\n\r\nThis module can also be used by simply placing it /Win32 directory \r\nsomewhere in @INC.\r\n\r\nThis module requires\r\n\r\nWin32::API by Aldo Calpini\r\n\r\nWin32::TieRegistry by Tye McQueen\r\n\r\n# CAVEATS\r\n\r\nThe information returned by the MemoryStatus function is volatile.\r\nThere is no guarantee that two sequential calls to this function\r\nwill return the same information.\r\n\r\nOn 32 bit computers with more than 4 GB of memory, the MemoryStatus function\r\ncan return incorrect information. Windows 2000 reports a value of -1\r\nto indicate an overflow. Earlier versions of Windows NT report a value\r\nthat is the real amount of memory, modulo 4 GB.\r\n\r\nOn 32 bit Intel x86 computers with more than 2 GB and less than 4 GB of memory,\r\nthe MemoryStatus function will always return 2 GB for TotalPhys.\r\nSimilarly, if the total available memory is between 2 and 4 GB, AvailPhys\r\nwill be rounded down to 2 GB.\r\n\r\n64 bit systems using 64 bit versions of Perl will report the correct amount of \r\nphysical memory.\r\n\r\nProcessorInfo will only return the CPU speed that is reported in the Windows\r\nregistry. This module used to include a DLL that performed a CPU speed calculation,\r\nbut all of these new-fangled processors caused the code to break. I don't have the\r\ntime or energy to rewrite the module so that it will play well with Dual Core,\r\nHyperthreading, and what else. The value from the registry appears to be accurate\r\non the machines I've tested this module on. Windows 9x/Me will return values of -1\r\nfor processor speed, as their registries don't store the MHz value. If you're using\r\nWin9x/Me and need the MHz value, use an older version of this module. Sorry.\r\n\r\nThe ProcessorName value is also pulled straight from the registry. Correctly\r\ndetermining the processor's name requires throwing some assembly at it, and \r\nif you've read the previous paragraph you'll know that DLL that threw assembly\r\nat the processor has been removed from this module.\r\n\r\nAll feedback on other configurations is greatly welcomed.\r\n\r\n# CHANGES\r\n\r\n    0.01 - Initial Release\r\n    0.02 - Fixed CPU speed reporting for Win9x. Module now includes a DLL that\r\n           performs the Win9x CPU speed determination.\r\n    0.03 - Fixed warning \"use of uninitialized value\" when calling MemoryStatus\r\n           with no size argument.\r\n    0.04 - Fixed \"GetValue\" error when calling ProcessorInfo as non-admin user\r\n           on WindowsNT\r\n           - Fixed documentation bug: \"AvailableVirtual\" to \"AvailVirtual\"\r\n    0.05 - Fixed bug introduced in 0.03 where $format was ignored in\r\n           MemoryStatus. All results were returned in bytes regardless of\r\n           $format parameter.\r\n    0.06 - Added new entry to processor information hash to display the name\r\n           of the processor. WindowsNT and 2K now use the DLL to determine\r\n           CPU speed as well.\r\n    0.07 - Changed contact information. Recompiled DLL to remove some extraneous calls.\r\n    0.08 - Added more definitions for recent CPUs. Added dependency on version 0.40\r\n           of Win32::API. Reworked Win32::API calls. Changed calls in DLL to\r\n           eliminate need to pack and unpack arguments.\r\n    0.09 - Eliminated cpuspd.dll. Should eliminate some of the headaches associated with\r\n           using this module. It should now return CPU info for all flavors of \r\n           Windows past Win9x without crashing.\r\n    0.10 - Added bug description for Perl Development Kit. Fixed link to ActiveState module\r\n           location.\r\n    0.11 - Suppress warnings that come from Win32::API when running with the -w switch. Fix bug\r\n           (http://rt.cpan.org/Public/Bug/Display.html?id=30894) where memory could grow \r\n           uncontrollably.\r\n    0.12 - Fix some 64 bit related bugs. Use correct SYSTEM_INFO structure \r\n           (http://rt.cpan.org/Public/Bug/Display.html?id=59365) and use correct struct size\r\n           (http://rt.cpan.org/Public/Bug/Display.html?id=48008).\r\n\r\n# BUGS\r\n\r\nFor versions 0.09 and forward, there is a compatibility bug with ActiveState's Perl Development\r\nKit version 6. Apparently the PDK has been designed to expect the cpuspd.dll file to be present and\r\nfails against versions of this module that do not include the DLL anymore. For details on the bug\r\nand workaround instructions, see this URL: [http://bugs.activestate.com/show\\_bug.cgi?id=67333](http://bugs.activestate.com/show\\_bug.cgi?id=67333)\r\n\r\n# VERSION\r\n\r\nThis man page documents Win32::SystemInfo version 0.12\r\n\r\nFebruary 17, 2013.\r\n\r\n# AUTHOR\r\n\r\nChad Johnston `<`cjohnston@megatome.com``\\>\r\n\r\n# COPYRIGHT\r\n\r\nCopyright (C) 2013 by Chad Johnston. All rights reserved.\r\n\r\n# LICENSE\r\n\r\nThis package is free software; you can redistribute it and/or modify\r\nit under the same terms as Perl itself.\r\n\r\n# SEE ALSO\r\n\r\nperl(1).\r\n\r\nWin32\r\nWin32/Utilities\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}